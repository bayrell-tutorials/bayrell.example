/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App;

use Runtime.Core.RemoteCallAnswer;
use Runtime.Web.Layout;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderDriver;
use Runtime.Web.Route;
use Runtime.Web.RouteList;
use Runtime.Web.CRUD.CrudPageModel;
use Runtime.Web.Table.TableModel;
use App.AppLayout;
use App.IndexPage;
use App.IndexPageModel;
use App.Page404;
use App.Pattern;
use App.Route1;
use App.Route2;
use App.Route3;
use App.TestPage;
use App.UsersPage;
use App.UsersPageModel;


@RouteList{}
static class Routes
{
	
	/**
	 * Layout chain
	 */
	pure LayoutModel layoutChain(LayoutModel layout)
	{
		if (layout.layout_name == "default") layout <= layout_class <= classof AppLayout;
		return [ layout ];
	}
	
	
	
	/**
	 * Render chain. Set default pattern
	 */
	pure RenderContainer renderChainPatternDefault(RenderContainer container)
	{
		if (container.pattern_name == "default" and container.pattern_class == "" or container.pattern_class == "")
		{
			container <= pattern_class <= classof Pattern;
		}
		return [ container ];
	}
	
	
	
	/**
	 * Render chain. Route after
	 */
	pure RenderContainer renderChainRouteAfter(RenderContainer container)
	{
		/* Change title */
		container <= layout <= title <= container.layout.title ~ " | Test app";
		
		return [ container ];
	}
	
	
	
	/**
	 * Route Action
	 * @return RenderContainer
	 */
	@Route{ "uri": "/", "name": "site:index" }
	static async RenderContainer IndexPage(RenderContainer container)
	{
		IndexPageModel page_model = new IndexPageModel
		{
		};
		
		/* Set title */
		container <= layout <= title <= "Index page";
		container <= layout <= layout_name <= "default";
		
		/* Set model */
		container <= layout <= page_class <= classof IndexPage;
		container <= layout <= page_model <= page_model;
		
		return [ container ];
	}
	
	
	
	/**
	 * Route Action
	 * @return RenderContainer
	 */
	@Route{ "uri": "/route1/", "name": "site:route1" }
	static async RenderContainer Route1Page(RenderContainer container)
	{
		IndexPageModel page_model = new IndexPageModel
		{
		};
		
		/* Set title */
		container <= layout <= title <= "Route1";
		container <= layout <= layout_name <= "default";
		
		/* Set model */
		container <= layout <= page_class <= classof Route1;
		container <= layout <= page_model <= page_model;
		
		return [ container ];
	}
	
	
	
	/**
	 * Route Action
	 * @return RenderContainer
	 */
	@Route{ "uri": "/route2/", "name": "site:route2" }
	static async RenderContainer Route2Page(RenderContainer container)
	{
		IndexPageModel page_model = new IndexPageModel
		{
		};
		
		/* Set title */
		container <= layout <= title <= "Route2";
		container <= layout <= layout_name <= "default";
		
		/* Set model */
		container <= layout <= page_class <= classof Route2;
		container <= layout <= page_model <= page_model;
		
		return [ container ];
	}
	
	
	
	/**
	 * Route Action
	 * @return RenderContainer
	 */
	@Route{ "uri": "/route3/", "name": "site:route3" }
	static async RenderContainer Route3Page(RenderContainer container)
	{
		IndexPageModel page_model = new IndexPageModel
		{
		};
		
		/* Set title */
		container <= layout <= title <= "Route3";
		container <= layout <= layout_name <= "default";
		
		/* Set model */
		container <= layout <= page_class <= classof Route3;
		container <= layout <= page_model <= page_model;
		
		return [ container ];
	}
	
	
	
	/**
	 * Route Action
	 * @return RenderContainer
	 */
	@Route{ "uri": "/test/{id}/{name}/", "name": "site:test_page" }
	static async RenderContainer TestPage(RenderContainer container)
	{
		IndexPageModel page_model = new IndexPageModel
		{
		};
		
		/* Set title */
		container <= layout <= title <= "Test page";
		container <= layout <= layout_name <= "default";
		
		/* Set model */
		container <= layout <= page_class <= classof TestPage;
		container <= layout <= page_model <= page_model;
		
		return [ container ];
	}
	
	
	
	/**
	 * Route Action
	 * @return RenderContainer
	 */
	@Route{ "uri": "/users/", "name": "site:users" }
	static async RenderContainer UsersPage(RenderContainer container)
	{
		/* Create model */
		UsersPageModel page_model = new UsersPageModel
		{
			"crud": new CrudPageModel
			{
			},
		};
		
		/* Remote call */
		Dict search_params = RenderDriver::getCrudSearchParams(container.request);
		RemoteCallAnswer answer = await RenderDriver::remoteBusCall
		(
			{
				"object_name": "App.Users",
				"interface_name": "core.crud",
				"method_name": "search",
				"data": search_params,
			},
			container
		);
		
		/* Answer */
		if (answer.isSuccess())
		{
			page_model <= crud <= table <= rows <= answer.response["items"];
			page_model <= crud <= table <= page <= answer.response["page"];
			page_model <= crud <= table <= pages <= answer.response["pages"];
		}
		
		/* Set title */
		container <= layout <= title <= "Users page";
		container <= layout <= layout_name <= "default";
		
		/* Set model */
		container <= layout <= page_class <= classof UsersPage;
		container <= layout <= page_model <= page_model;
		
		return [ container ];
	}
	
	
	
	/**
	 * Render chain
	 * Page not found
	 * @return RenderContainer
	 */
	static async RenderContainer Page404(RenderContainer container)
	{
		if (container == null or container.isResponseExists() or container.isPageExists()) return [ container ];
		
		IndexPageModel page_model = new IndexPageModel
		{
		};
		
		/* Set title */
		container <= layout <= title <= "Page not found";
		container <= layout <= layout_name <= "default";
		
		/* Set model */
		container <= layout <= page_class <= classof Page404;
		container <= layout <= page_model <= page_model;
		
		/* Set 404 code */
		container <= new_http_code <= 404;
		
		return [ container ];
	}
	
}